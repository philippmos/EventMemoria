@using Microsoft.AspNetCore.Components.Forms
@using Vogelhochzeit.Models
@inject IWebHostEnvironment Environment
@inject ISnackbar Snackbar

<MudItem xs="6" sm="4" md="3">
    <MudPaper Class="d-flex flex-column justify-center align-center pa-4" 
              Height="150px" 
              Style="background: linear-gradient(135deg, #C4A4C7 0%, #A889AA 100%); position: relative; border-radius: 8px;">
        
        @if (isUploading)
        {
            <MudProgressCircular Color="Color.Primary" Size="Size.Medium" Indeterminate="true" />
            <MudText Typo="Typo.body2" Class="mt-2" Style="color: white; text-align: center; font-weight: 500;">
                @uploadProgress
            </MudText>
        }
        else
        {
            <InputFile
                       multiple 
                       accept="image/*" 
                       OnChange="@HandleMultiFileUpload"
                       disabled="@isUploading"
                       style="position: absolute; width: 100%; height: 100%; opacity: 0; cursor: pointer; z-index: 1;" />


            <MudIcon Icon="@Icons.Material.Filled.Add" Size="Size.Large" Style="color: white; font-size: 2rem;" />
            <MudText Typo="Typo.body2" Class="mt-2" Style="color: white; text-align: center; font-weight: 500;">
                Hochladen
            </MudText>
        }
    </MudPaper>
</MudItem>

@code {
    [Parameter] public EventCallback OnPhotosUploaded { get; set; }

    private bool isUploading = false;
    private string uploadProgress = "";

    private const long MaxFileSize = 150 * 1024 * 1024;

    private readonly string[] AllowedExtensions = { ".jpg", ".jpeg", ".png", ".gif", ".webp", ".bmp" };



    private async Task HandleMultiFileUpload(InputFileChangeEventArgs eventArgs)
    {
        if (eventArgs.FileCount == 0)
        {
            return;
        }

        isUploading = true;
        uploadProgress = "Vorbereitung...";

        var uploadPath = Path.Combine(Environment.WebRootPath, "uploads");
        
        if (!Directory.Exists(uploadPath))
        {
            Directory.CreateDirectory(uploadPath);
        }

        var totalFiles = eventArgs.FileCount;
        var processedFiles = 0;
        var uploadedFiles = 0;

        foreach( var browserFile in eventArgs.GetMultipleFiles())
        {
            processedFiles++;
            uploadProgress = $"Verarbeite Datei {processedFiles} von {totalFiles}...";

            if (browserFile is null)
            {
                continue;
            }

            if (!IsFileValid(browserFile))
            {
                Snackbar.Add($"Datei '{browserFile.Name}' übersprungen: Ungültiges Format oder zu groß", Severity.Warning);
                continue;
            }

            try
            {
                var fileName = $"{Guid.NewGuid()}{Path.GetExtension(browserFile.Name)}";
                var targetFilePath = Path.Combine(uploadPath, fileName);

                using var fileStream = browserFile.OpenReadStream(MaxFileSize);
                using var destinationStream = new FileStream(targetFilePath, FileMode.Create);

                await fileStream.CopyToAsync(destinationStream);

                uploadedFiles++;
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Fehler beim Hochladen von '{browserFile.Name}': {ex.Message}", Severity.Error);
            }
        }

        if (uploadedFiles > 0)
        {
            Snackbar.Add($"{uploadedFiles} Foto(s) erfolgreich hochgeladen", Severity.Success);
            
            await OnPhotosUploaded.InvokeAsync();
        }
        else
        {
            Snackbar.Add("Keine Fotos hochgeladen", Severity.Warning);
        }

        isUploading = false;
        uploadProgress = "";
    }
    
    private bool IsFileValid(IBrowserFile file)
    {
        if (file.Size > MaxFileSize)
        {
            return false;
        }
        
        var extension = Path.GetExtension(file.Name).ToLowerInvariant();
        if (!AllowedExtensions.Contains(extension))
        {
            return false;
        }
        
        if (!file.ContentType.StartsWith("image/"))
        {
            return false;
        }
        
        return true;
    }
}
