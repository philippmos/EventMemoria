@using Microsoft.Extensions.Options
@using Vogelhochzeit.Common.Constants
@using Vogelhochzeit.Common.Settings
@using Vogelhochzeit.Models
@using Vogelhochzeit.Services
@using Vogelhochzeit.Services.Interfaces
@inject IDialogService DialogService
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.False" Class="pa-0">
    @if (_isLoading)
    {
        <MudStack Spacing="3" Class="pa-4">
            <MudProgressLinear Color="Color.Primary" Indeterminate="true" />
            <MudText Typo="Typo.body1" Align="Align.Center">Lade Fotos...</MudText>
        </MudStack>
    }
    else if (_allPhotos.Any())
    {
        <MudStack Spacing="2" Class="pa-2">
            <PhotoGridControlsComponent PhotosPerRow="@_photosPerRow"
                                        OnPhotosPerRowChanged="@SetPhotosPerRowAsync" />
            
            <div style="height: @ApplicationConstants.Ui.GridContainerHeight; overflow-y: auto;">
                <MudVirtualize Items="@_photoRows" Context="row" ItemSize="@GetRowHeight()" OverscanCount="@ApplicationConstants.Pagination.VirtualizationOverscanCount">
                    <div class="photo-row" style="display: flex; gap: 12px; padding: 6px; justify-content: flex-start; flex-wrap: nowrap;">
                        @foreach (var photo in row)
                        {
                            <PhotoCardComponent Photo="@photo"
                                                PhotosPerRow="@_photosPerRow"
                                                IsImageLoaded="@_loadedImages.Contains(photo.Id)"
                                                OnPhotoClicked="@OnPhotoClickedAsync"
                                                OnImageLoaded="@OnImageLoadedAsync" />
                        }
                    </div>
                </MudVirtualize>
            </div>
        </MudStack>
    }
    else
    {
        <MudAlert Severity="Severity.Info" Class="ma-4">
            Keine Fotos vorhanden. Starte mit dem Hochladen!
        </MudAlert>
    }
</MudContainer>



@code {
    [Parameter] public EventCallback<List<Photo>> OnPhotosLoaded { get; set; }

    [Inject] private IOptions<ImageOptions> ImageOptions { get; set; } = default!;
    [Inject] private IPhotoGridService PhotoGridService { get; set; } = default!;
    [Inject] private IStorageService _storageService { get; set; } = default!;

    private int _photosPerRow { get; set; }
    private List<Photo> _allPhotos = new();
    private List<List<Photo>> _photoRows = new();
    private HashSet<string> _loadedImages = new();
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        _photosPerRow = ImageOptions.Value.DefaultPhotosPerRow;
        await LoadAllPhotosAsync();
    }

    private async Task LoadAllPhotosAsync()
    {
        try
        {
            _isLoading = true;
            StateHasChanged();

            var result = await _storageService.GetPhotosPagedAsync(1, ApplicationConstants.Pagination.MaxPageSize);
            _allPhotos = result.Items;

            CreatePhotoRows();

            if (OnPhotosLoaded.HasDelegate)
            {
                await OnPhotosLoaded.InvokeAsync(_allPhotos);
            }

        }
        catch (Exception ex)
        {
            Snackbar.Add($"Fehler beim Laden der Fotos: {ex.Message}", Severity.Error);
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private void CreatePhotoRows()
    {
        _photoRows = PhotoGridService.CreatePhotoRows(_allPhotos, _photosPerRow);
    }

    private async Task SetPhotosPerRowAsync(int count)
    {
        if (!PhotoGridService.IsValidPhotosPerRow(count) || _photosPerRow == count)
        {
            return;
        }

        _photosPerRow = count;
        CreatePhotoRows();
        await InvokeAsync(StateHasChanged);
    }

    private int GetRowHeight() => PhotoGridService.GetRowHeight(_photosPerRow);

    private async Task OnImageLoadedAsync(string photoId)
    {
        if (!_loadedImages.Contains(photoId))
        {
            _loadedImages.Add(photoId);
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task OnPhotoClickedAsync(Photo photo)
    {
        var photoIndex = _allPhotos.FindIndex(p => p.Id == photo.Id);
        if (photoIndex >= 0)
            await OpenGalleryAsync(photoIndex);
    }

    private async Task OpenGalleryAsync(int initialIndex)
    {
        if (!_allPhotos.Any() || initialIndex < 0)
            return;

        var pageSize = ApplicationConstants.Pagination.MaxPageSize;
        var currentPage = (initialIndex / pageSize) + 1;
        var startIndex = (currentPage - 1) * pageSize;
        var galleryPhotos = _allPhotos.Skip(startIndex).Take(pageSize).ToList();
        var adjustedIndex = Math.Max(0, initialIndex - startIndex);

        var parameters = new DialogParameters<ImageGalleryDialog>
        {
            { x => x.Photos, galleryPhotos },
            { x => x.InitialIndex, adjustedIndex },
            { x => x.CurrentPage, currentPage },
            { x => x.TotalPages, (int)Math.Ceiling((double)_allPhotos.Count / pageSize) }
        };

        var options = new DialogOptions
        {
            MaxWidth = MaxWidth.ExtraExtraLarge,
            FullWidth = true,
            CloseOnEscapeKey = true,
            CloseButton = true,
            FullScreen = true
        };

        await DialogService.ShowAsync<ImageGalleryDialog>("Fotogalerie", parameters, options);
    }

    public async Task RefreshPhotos()
    {
        _loadedImages.Clear();
        await LoadAllPhotosAsync();
    }
}
