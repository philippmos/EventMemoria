@using Microsoft.AspNetCore.Components.Forms
@using Vogelhochzeit.Services
@using Vogelhochzeit.Services.Interfaces

<MudItem xs="12" sm="12" md="12" lg="12">
    <MudPaper Class="d-flex flex-column justify-center align-center pa-4 mt-3 mb-1 ml-4 mr-3" 
              Style="background: linear-gradient(135deg, #A86C6C 0%, #A86C6C 100%); position: relative; border-radius: 8px;">
        
        @if (_isUploading)
        {
            <MudProgressCircular Color="Color.Primary" Size="Size.Medium" Indeterminate="true" />
            <MudText Typo="Typo.body2" Class="mt-2" Style="color: white; text-align: center; font-weight: 500;">
                @_uploadProgress
            </MudText>
        }
        else
        {
            <InputFile
                       multiple 
                       accept="image/*" 
                       OnChange="@HandleMultiFileUploadAsync"
                       disabled="@_isUploading"
                       style="position: absolute; width: 100%; height: 100%; opacity: 0; cursor: pointer; z-index: 1;" />

            <MudIcon Icon="@Icons.Material.Filled.Add" Size="Size.Large" Style="color: white; font-size: 2rem;" />
            <MudText Typo="Typo.body2" Class="mt-2" Style="color: white; text-align: center; font-weight: 500;">
                Hochladen
            </MudText>
            <MudText Typo="Typo.caption" Class="mt-1" Style="color: rgba(255,255,255,0.8); text-align: center;">
                Mehrere Dateien unterst√ºtzt
            </MudText>
        }
    </MudPaper>
</MudItem>

@code {
    [Parameter] public EventCallback OnPhotosUploaded { get; set; }

    [Inject] private IStorageService _storageService { get; set; } = default!;
    [Inject] private ISnackbar Snackbar { get; set; } = default!;
    [Inject] private IFileValidationService _fileValidationService { get; set; } = default!;

    private bool _isUploading { get; set; } = false;
    private string _uploadProgress = string.Empty;

    private async Task HandleMultiFileUploadAsync(InputFileChangeEventArgs eventArgs)
    {
        if (eventArgs.FileCount == 0)
        {
            return;
        }

        var files = eventArgs.GetMultipleFiles(maximumFileCount: 50).ToList();
        var validationResult = _fileValidationService.ValidateFiles(files);
        
        if (!validationResult.IsValid)
        {
            Snackbar.Add(validationResult.ErrorMessage, Severity.Error);
            return;
        }

        await ProcessFileUploadsAsync(files);
    }

    private async Task ProcessFileUploadsAsync(IReadOnlyList<IBrowserFile> files)
    {
        _isUploading = true;
        _uploadProgress = "Vorbereitung...";

        var uploadResults = new List<UploadResult>();

        for (var i = 0; i < files.Count; i++)
        {
            var file = files[i];
            _uploadProgress = $"Verarbeite Datei {i + 1} von {files.Count}...";

            var result = await UploadSingleFileAsync(file);
            uploadResults.Add(result);
        }

        await HandleUploadResults(uploadResults);
        
        _isUploading = false;
        _uploadProgress = string.Empty;
    }

    private async Task<UploadResult> UploadSingleFileAsync(IBrowserFile file)
    {
        try
        {
            using var fileStream = file.OpenReadStream(50 * 1024 * 1024); // 50MB
            await _storageService.UploadFileAsync(fileStream, file.Name, file.ContentType);
            
            return UploadResult.Success(file.Name);
        }
        catch (Exception ex)
        {
            return UploadResult.Failure(file.Name, ex.Message);
        }
    }

    private async Task HandleUploadResults(IReadOnlyList<UploadResult> results)
    {
        var successCount = results.Count(r => r.IsSuccess);
        var failures = results.Where(r => !r.IsSuccess).ToList();

        if (successCount > 0)
        {
            Snackbar.Add($"{successCount} Foto(s) erfolgreich hochgeladen", Severity.Success);
            
            if (OnPhotosUploaded.HasDelegate)
            {
                await OnPhotosUploaded.InvokeAsync();
            }
        }

        foreach (var failure in failures.Take(3))
        {
            Snackbar.Add($"Fehler bei '{failure.FileName}': {failure.ErrorMessage}", Severity.Error);
        }

        if (failures.Count > 3)
        {
            Snackbar.Add($"Und {failures.Count - 3} weitere Fehler...", Severity.Warning);
        }
    }

    private record UploadResult(bool IsSuccess, string FileName, string ErrorMessage = "")
    {
        public static UploadResult Success(string fileName) => new(true, fileName);
        public static UploadResult Failure(string fileName, string errorMessage) => new(false, fileName, errorMessage);
    }
}
