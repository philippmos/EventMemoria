@using Vogelhochzeit.Models
@using Vogelhochzeit.Services
@using Vogelhochzeit.Services.Interfaces

<div class="photo-container" style="@PhotoGridService.GetPhotoContainerStyle(PhotosPerRow)">
    <MudCard Class="photo-card-virtual" Style="height: 100%; transition: all 0.2s ease;">
        <MudCardContent Class="pa-1" Style="height: 100%;">
            <div class="photo-container" 
                 style="height: @(GetPhotoContainerHeight())px; position: relative; overflow: hidden; border-radius: 8px; cursor: pointer;"
                 @onclick="@(() => OnPhotoClicked.InvokeAsync(Photo))">
                
                @if (!IsPhotoLoaded)
                {
                    <div class="photo-placeholder" style="width: 100%; height: 100%; background: linear-gradient(45deg, #f0f0f0, #e0e0e0); display: flex; align-items: center; justify-content: center;">
                        <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                    </div>
                }
                
                <MudImage 
                    Src="@Photo.Url"
                    Alt="@(Photo.Alt ?? "Foto")"
                    ObjectFit="ObjectFit.Cover"
                    Style="@GetPhotoStyle()"
                    @onload="@OnPhotoLoadAsync" />
            </div>
            
            <MudText Typo="Typo.caption" Class="mt-1 text-truncate" Style="font-size: 0.7rem;">
                @PhotoGridService.GetShortFileName(Photo.FileName)
            </MudText>
        </MudCardContent>
    </MudCard>
</div>

@code {
    [Parameter, EditorRequired] public Photo Photo { get; set; } = default!;
    [Parameter] public int PhotosPerRow { get; set; }
    [Parameter] public bool IsPhotoLoaded { get; set; }
    [Parameter] public EventCallback<Photo> OnPhotoClicked { get; set; }
    [Parameter] public EventCallback<string> OnPhotoLoaded { get; set; }

    [Inject] private IPhotoGridService PhotoGridService { get; set; } = default!;

    private int GetPhotoContainerHeight() 
        => PhotoGridService.GetRowHeight(PhotosPerRow) - 60; // UI offset constant

    private string GetPhotoStyle()
    {
        var baseStyle = "width: 100%; height: 100%; object-fit: cover; transition: all 0.3s ease;";
        baseStyle += IsPhotoLoaded ? " opacity: 1;" : " opacity: 0;";
        return baseStyle;
    }

    private async Task OnPhotoLoadAsync()
    {
        if (OnPhotoLoaded.HasDelegate)
        {
            await OnPhotoLoaded.InvokeAsync(Photo.Id);
        }
    }
}
