@using EventMemoria.Web.Common.Constants
@using EventMemoria.Web.Models
@using EventMemoria.Web.Services.Interfaces
@using EventMemoria.Web.Services

<div class="photo-grid__container" style="@PhotoGridService.GetPhotoContainerStyle(PhotosPerRow)">
    <MudCard Class="photo-card">
        <MudCardContent Class="photo-card__content pa-1">
            <div class="photo-card__image-container" 
                 style="height: @(GetPhotoContainerHeight())px;"
                 @onclick="@(() => OnPhotoClicked.InvokeAsync(Photo))">
                
                @if (!IsPhotoLoaded)
                {
                    <div class="photo-card__placeholder">
                        <MudProgressCircular Size="Size.Small" Indeterminate="true" />
                    </div>
                }
                
                <MudImage 
                    Src="@Photo.Url"
                    Alt="@(Photo.Alt ?? "Foto")"
                    ObjectFit="ObjectFit.Cover"
                    Class="photo-card__image"
                    Style="@GetPhotoOpacityStyle()"
                    @onload="@OnPhotoLoadAsync" />
            </div>
            
            <MudText Typo="Typo.caption" Class="photo-card__filename mt-1 text-truncate">
                @PhotoGridService.GetShortFileName(Photo.FileName)
            </MudText>
        </MudCardContent>
    </MudCard>
</div>

@code {
	[Parameter, EditorRequired] public Photo Photo { get; set; } = default!;
	[Parameter] public int PhotosPerRow { get; set; }
	[Parameter] public bool IsPhotoLoaded { get; set; }
	[Parameter] public EventCallback<Photo> OnPhotoClicked { get; set; }
	[Parameter] public EventCallback<string> OnPhotoLoaded { get; set; }

	[Inject] private IPhotoGridService PhotoGridService { get; set; } = default!;

	private int GetPhotoContainerHeight()
	{
		return PhotoGridService.GetRowHeight(PhotosPerRow) - ApplicationConstants.Ui.PhotoCardOffset;
	}

    private string GetPhotoOpacityStyle()
    {
        return IsPhotoLoaded ? "opacity: 1;" : "opacity: 0;";
    }

    private async Task OnPhotoLoadAsync()
    {
        if (OnPhotoLoaded.HasDelegate)
        {
            await OnPhotoLoaded.InvokeAsync(Photo.Id);
        }
    }
}
