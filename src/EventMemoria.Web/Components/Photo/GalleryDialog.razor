@using EventMemoria.Web.Common.Constants
@using EventMemoria.Web.Helpers
@using EventMemoria.Web.Models
@using EventMemoria.Web.Services.Interfaces
@using MudBlazor
@using MudBlazor.Services
@using EventMemoria.Web.Services

<MudDialog>
    <TitleContent>
        <div class="d-flex align-center">
            <MudText Typo="Typo.h6">
                @if (TotalPages > 1)
                {
                    <span class="text-muted ml-2">(Seite @CurrentPage von @TotalPages)</span>
                }
            </MudText>
            <MudSpacer />
            @if (TotalPages > 1)
            {
                <MudButtonGroup Size="Size.Small" Variant="Variant.Outlined">
                    <MudButton OnClick="LoadPreviousPage"
                              Disabled="@(CurrentPage <= 1 || _isLoadingPage)"
                              StartIcon="Icons.Material.Filled.NavigateBefore">
                        Vorherige Seite
                    </MudButton>
                    <MudButton OnClick="LoadNextPage"
                              Disabled="@(CurrentPage >= TotalPages || _isLoadingPage)"
                              EndIcon="Icons.Material.Filled.NavigateNext">
                        Nächste Seite
                    </MudButton>
                </MudButtonGroup>
            }
        </div>
    </TitleContent>
    <DialogContent>
        <div class="photo-gallery d-flex flex-column align-center">
            @if (_isLoadingPage)
            {
                <div class="photo-gallery__loading-container">
                    <MudProgressCircular Size="Size.Large" Indeterminate="true" />
                </div>
            }
            else
            {
                <div class="photo-gallery__main-container d-flex align-center justify-center">
                    <MudIconButton Icon="@Icons.Material.Filled.ChevronLeft"
                                  Color="Color.Primary"
                                  Size="Size.Large"
                                  OnClick="PreviousPhoto"
                                  Disabled="@(!CanNavigateLeft())"
                                  Class="photo-gallery__nav-button photo-gallery__nav-button--left" />
                    
                    <MudImage Src="@_currentPhoto.Url"
                             Alt="@_currentPhoto.Alt"
                             Class="photo-gallery__main-image" />
                    
                    <MudIconButton Icon="@Icons.Material.Filled.ChevronRight"
                                  Color="Color.Primary"
                                  Size="Size.Large"
                                  OnClick="NextPhoto"
                                  Disabled="@(!CanNavigateRight())"
                                  Class="photo-gallery__nav-button photo-gallery__nav-button--right" />
                </div>
                
                <MudPaper Class="photo-gallery__info-panel pa-3 mt-3" Elevation="1">
                    <div class="photo-gallery__info-content">
                        <MudText Typo="Typo.body1" Class="photo-gallery__filename">
                            <strong>@_currentPhoto.FileName</strong>
                        </MudText>
                        <div class="photo-gallery__meta-info">
                            <MudText Typo="Typo.body2" Class="text-muted">
                                @PhotoHelper.FormatFileSize(_currentPhoto.FileSize)
                            </MudText>
                            <MudText Typo="Typo.body2" Class="text-muted">
                                @_currentPhoto.UploadDate.ToString(ApplicationConstants.Ui.DateFormat)
                            </MudText>
                            <MudText Typo="Typo.body2" Class="text-muted">
                                <strong>Author:</strong> @_currentPhoto.Author
                            </MudText>
                        </div>
                    </div>
                </MudPaper>
                
                @if (Photos.Count > 1)
                {
                    <div class="photo-gallery__thumbnails d-flex justify-center mt-4">
                        @for (int i = 0; i < Photos.Count; i++)
                        {
                            var index = i;
                            <MudPaper Class="@($"{GetThumbnailClass(index)} photo-gallery__thumbnail")"
                                     @onclick="() => SetCurrentPhoto(index)">
                                <MudImage Src="@Photos[index].Url"
                                         Alt="Thumbnail"
                                         Width="60"
                                         Height="60"
                                         ObjectFit="ObjectFit.Cover" />
                            </MudPaper>
                        }
                    </div>
                }
            }
        </div>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] IDialogReference MudDialog { get; set; } = null!;
    
    [Parameter] public List<Photo> Photos { get; set; } = [];
    [Parameter] public int InitialIndex { get; set; } = 0;
    [Parameter] public int CurrentPage { get; set; } = 1;
    [Parameter] public int TotalPages { get; set; } = 1;

	[Inject] private IJSRuntime JSRuntime { get; set; } = default!;
	[Inject] private IStorageService StorageService { get; set; } = default!;
	[Inject] private ISnackbar Snackbar { get; set; } = default!;

    private int _currentIndex { get; set; }
    private bool _isLoadingPage = false;
    
    private Photo _currentPhoto 
        => Photos.Count > 0 && _currentIndex < Photos.Count 
            ? Photos[_currentIndex] 
            : new Photo 
            { 
                Id = Guid.NewGuid().ToString(), 
                FileName = "", 
                Url = "",
                UploadDate = DateTime.MinValue,
                FileSize = 0
            };

    protected override void OnInitialized()
    {
        _currentIndex = Math.Max(0, Math.Min(InitialIndex, Photos.Count - 1));
    }

    private void NextPhoto()
    {
        if (_currentIndex < Photos.Count - 1)
        {
            _currentIndex++;
            InvokeAsync(StateHasChanged);
        }
        else if (CurrentPage < TotalPages)
        {
            _ = Task.Run(async () =>
            {
                await LoadNextPage();
                _currentIndex = 0;
                await InvokeAsync(StateHasChanged);
            });
        }
    }

    private void PreviousPhoto()
    {
        if (_currentIndex > 0)
        {
            _currentIndex--;
            InvokeAsync(StateHasChanged);
        }
        else if (CurrentPage > 1)
        {
            _ = Task.Run(async () =>
            {
                await LoadPreviousPage();
                _currentIndex = Math.Max(0, Photos.Count - 1);
                await InvokeAsync(StateHasChanged);
            });
        }
    }

    private void SetCurrentPhoto(int index)
    {
        if (index >= 0 && index < Photos.Count)
        {
            _currentIndex = index;
            InvokeAsync(StateHasChanged);
        }
    }
    
    private bool CanNavigateLeft()
    {
        return _currentIndex > 0 || CurrentPage > 1;
    }

    private bool CanNavigateRight()
    {
        return _currentIndex < Photos.Count - 1 || CurrentPage < TotalPages;
    }

    private async Task LoadPreviousPage()
    {
        if (CurrentPage <= 1 || _isLoadingPage)
        {
            return;
        }

        try
        {
            _isLoadingPage = true;
            StateHasChanged();
            
            CurrentPage--;
            var pagedResult = await StorageService.GetPhotosPagedAsync(CurrentPage, ApplicationConstants.Pagination.DefaultPageSize);
            Photos = pagedResult.Items;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Fehler beim Laden der vorherigen Seite: {ex.Message}", Severity.Error);
            CurrentPage++;
            StateHasChanged();
        }
        finally
        {
            _isLoadingPage = false;
            StateHasChanged();
        }
    }

    private async Task LoadNextPage()
    {
        if (CurrentPage >= TotalPages || _isLoadingPage)
        {
            return;
        }

        try
        {
            _isLoadingPage = true;
            StateHasChanged();
            
            CurrentPage++;
			var pagedResult = await StorageService.GetPhotosPagedAsync(CurrentPage, ApplicationConstants.Pagination.DefaultPageSize);
            Photos = pagedResult.Items;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Fehler beim Laden der nächsten Seite: {ex.Message}", Severity.Error);
            CurrentPage--;
            StateHasChanged();
        }
        finally
        {
            _isLoadingPage = false;
            StateHasChanged();
        }
    }

    private string GetThumbnailClass(int index)
    {
        return index == _currentIndex 
            ? "pa-1 mud-elevation-4 mud-primary" 
            : "pa-1 mud-elevation-1";
    }

    private void Close()
    {
        MudDialog?.Close();
    }
}
