@using EventMemoria.Web.Common.Constants
@using EventMemoria.Web.Helpers
@using EventMemoria.Web.Services.Interfaces
@using Microsoft.FeatureManagement

<MudDialog>
    <TitleContent>
        <div class="d-flex align-center">
            <MudText Typo="Typo.h6">
                @if (TotalPages > 1)
                {
                    <span class="text-muted ml-2">(Seite @CurrentPage von @TotalPages)</span>
                }
            </MudText>
            <MudSpacer />
            @if (TotalPages > 1)
            {
                <MudButtonGroup Size="Size.Small" Variant="MudBlazor.Variant.Outlined">
                    <MudButton OnClick="LoadPreviousPageAsync"
                              Disabled="@(CurrentPage <= 1 || IsLoadingPage)"
                              StartIcon="Icons.Material.Filled.NavigateBefore">
                        Vorherige Seite
                    </MudButton>
                    <MudButton OnClick="LoadNextPageAsync"
                              Disabled="@(CurrentPage >= TotalPages || IsLoadingPage)"
                              EndIcon="Icons.Material.Filled.NavigateNext">
                        Nächste Seite
                    </MudButton>
                </MudButtonGroup>
            }
        </div>
    </TitleContent>
    <DialogContent>
        <div class="photo-gallery d-flex flex-column align-center">
            @if (IsLoadingPage)
            {
                <div class="photo-gallery__loading-container">
                    <MudProgressCircular Size="Size.Large" Indeterminate="true" />
                </div>
            }
            else
            {
                <div class="photo-gallery__main-container d-flex align-center justify-center">
                    <MudIconButton Icon="@Icons.Material.Filled.ChevronLeft"
                                  Color="Color.Primary"
                                  Size="Size.Large"
                                  OnClick="PreviousPhoto"
                                  Disabled="@(!CanNavigateLeft())"
                                  Class="photo-gallery__nav-button photo-gallery__nav-button--left" />

                    <MudImage Src="@CurrentPhoto.Url"
                             Alt="@CurrentPhoto.Alt"
                             Class="photo-gallery__main-image" />

                    <MudIconButton Icon="@Icons.Material.Filled.ChevronRight"
                                  Color="Color.Primary"
                                  Size="Size.Large"
                                  OnClick="NextPhoto"
                                  Disabled="@(!CanNavigateRight())"
                                  Class="photo-gallery__nav-button photo-gallery__nav-button--right" />
                </div>

                <MudPaper Class="photo-gallery__info-panel pa-3 mt-3" Elevation="1">
                    <div class="photo-gallery__info-content">
                        <MudText Typo="Typo.body1" Class="photo-gallery__filename">
                            <strong>@CurrentPhoto.FileName</strong>
                        </MudText>
                        <div class="photo-gallery__meta-info">
                            <MudText Typo="Typo.body2" Class="text-muted">
                                @PhotoHelper.FormatFileSize(CurrentPhoto.FileSize)
                            </MudText>
                            <MudText Typo="Typo.body2" Class="text-muted">
                                @CurrentPhoto.UploadDate.ToString(ApplicationConstants.Ui.DateFormat)
                            </MudText>

							@if (_showAuthorInfo)
							{
								<MudText Typo="Typo.body2" Class="text-muted">
									<strong>Author:</strong> @CurrentPhoto.Author
								</MudText>
							}
                        </div>
                    </div>
                </MudPaper>

                @if (Photos.Count > 1)
                {
                    <div class="photo-gallery__thumbnails d-flex justify-center mt-4">
                        @for (var i = 0; i < Photos.Count; i++)
                        {
                            var index = i;
                            <MudPaper Class="@($"{GetThumbnailClass(index)} photo-gallery__thumbnail")"
                                     @onclick="() => SetCurrentPhoto(index)">
                                <MudImage Src="@Photos[index].Url"
                                         Alt="Thumbnail"
                                         Width="60"
                                         Height="60"
                                         ObjectFit="ObjectFit.Cover" />
                            </MudPaper>
                        }
                    </div>
                }
            }
        </div>
    </DialogContent>
</MudDialog>

@code {
	[CascadingParameter] IDialogReference MudDialog { get; set; } = null!;

	[Parameter] public List<Photo> Photos { get; set; } = [];
	[Parameter] public int InitialIndex { get; set; }
	[Parameter] public int CurrentPage { get; set; } = 1;
	[Parameter] public int TotalPages { get; set; } = 1;

	[Inject] private IStorageService StorageService { get; set; } = null!;
	[Inject] private ISnackbar Snackbar { get; set; } = null!;
	[Inject] private ILogger<GalleryDialog> Logger { get; set; } = null!;
	[Inject] private IFeatureManager FeatureManager { get; set; } = null!;

	private int CurrentIndex { get; set; }
	private bool IsLoadingPage { get; set; }

	private Photo CurrentPhoto
		=> Photos.Count > 0 && CurrentIndex < Photos.Count
			? Photos[CurrentIndex]
			: new Photo
            {
                Id = Guid.NewGuid().ToString(),
                FileName = "",
                Url = "",
                UploadDate = DateTime.MinValue,
                FileSize = 0
            };

	private bool _showAuthorInfo = false;

	protected override async Task OnInitializedAsync()
	{
		_showAuthorInfo = await FeatureManager.IsEnabledAsync(FeatureFlags.ShowAuthorInfo);

		CurrentIndex = Math.Max(0, Math.Min(InitialIndex, Photos.Count - 1));
	}

    private void NextPhoto()
    {
        if (CurrentIndex < Photos.Count - 1)
        {
            CurrentIndex++;
            InvokeAsync(StateHasChanged);
        }
        else if (CurrentPage < TotalPages)
        {
            _ = Task.Run(async () =>
            {
                await LoadNextPageAsync();
                CurrentIndex = 0;
                await InvokeAsync(StateHasChanged);
            });
        }
    }

    private void PreviousPhoto()
    {
        if (CurrentIndex > 0)
        {
            CurrentIndex--;
            InvokeAsync(StateHasChanged);
        }
        else if (CurrentPage > 1)
        {
            _ = Task.Run(async () =>
            {
                await LoadPreviousPageAsync();
                CurrentIndex = Math.Max(0, Photos.Count - 1);
                await InvokeAsync(StateHasChanged);
            });
        }
    }

    private void SetCurrentPhoto(int index)
    {
        if (index < 0 || index >= Photos.Count)
        {
            return;
        }

        CurrentIndex = index;
        InvokeAsync(StateHasChanged);
    }

    private bool CanNavigateLeft() => CurrentIndex > 0 || CurrentPage > 1;

    private bool CanNavigateRight() => CurrentIndex < Photos.Count - 1 || CurrentPage < TotalPages;

    private async Task LoadPreviousPageAsync()
    {
        if (CurrentPage <= 1 || IsLoadingPage)
        {
            return;
        }

        try
        {
            IsLoadingPage = true;
            StateHasChanged();

            CurrentPage--;
            var pagedResult = await StorageService.GetPhotosPagedAsync(CurrentPage, ApplicationConstants.Pagination.DefaultPageSize);
            Photos = pagedResult.Items;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add("Fehler beim Laden der vorherigen Seite", Severity.Error);
            Logger.LogError(ex, "Fail when loading previous page");
            CurrentPage++;
            StateHasChanged();
        }
        finally
        {
            IsLoadingPage = false;
            StateHasChanged();
        }
    }

    private async Task LoadNextPageAsync()
    {
        if (CurrentPage >= TotalPages || IsLoadingPage)
        {
            return;
        }

        try
        {
            IsLoadingPage = true;
            StateHasChanged();

            CurrentPage++;
			var pagedResult = await StorageService.GetPhotosPagedAsync(CurrentPage, ApplicationConstants.Pagination.DefaultPageSize);
            Photos = pagedResult.Items;
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add("Fehler beim Laden der nächsten Seite", Severity.Error);
            Logger.LogError(ex, "Fail when loading next page");
            CurrentPage--;
            StateHasChanged();
        }
        finally
        {
            IsLoadingPage = false;
            StateHasChanged();
        }
    }

    private string GetThumbnailClass(int index)
    {
        return index == CurrentIndex
            ? "pa-1 mud-elevation-4 mud-primary"
            : "pa-1 mud-elevation-1";
    }
}
