@using EventMemoria.Web.Common.Constants
@using EventMemoria.Web.Helpers
@using EventMemoria.Web.Services.Interfaces
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.FeatureManagement

@if (_isFeatureEnabled)
{
	<MudItem xs="12" sm="12" md="12" lg="12">
		<MudPaper Class="d-flex flex-column justify-center align-center pa-4 mt-3 mb-1 ml-4 mr-3"
				  Style="background: linear-gradient(135deg, #A86C6C 0%, #A86C6C 100%); position: relative; border-radius: 8px;">

			<InputFile multiple
					   accept="@AcceptedContentTypes"
					   OnChange="@HandleMultiFileUploadAsync"
					   disabled="@(IsUploading || string.IsNullOrWhiteSpace(UserName))"
					   style="position: absolute; width: 100%; height: 100%; opacity: 0; cursor: pointer; z-index: 1;" />


			@if (_hasRendered)
			{
				if (string.IsNullOrWhiteSpace(UserName))
				{
					<MudIcon Icon="@Icons.Material.Outlined.LockPerson" Style="color: #ffffff;" />
					<MudText Typo="Typo.body2" Class="mt-2" Style="color: white; text-align: center;">
						Bitte gebe zuerst Deinen Namen ein
					</MudText>
				}
				else if (IsUploading)
				{
					<MudProgressCircular Color="Color.Primary" Size="Size.Medium" Indeterminate="true" />
					<MudText Typo="Typo.body2" Class="mt-2" Style="color: white; text-align: center; font-weight: 500;">
						@_uploadProgress
					</MudText>
				}
				else
				{
					<MudIcon Icon="@Icons.Material.Filled.Add" Size="Size.Large" Style="color: white; font-size: 2rem;" />
					<MudText Typo="Typo.body2" Class="mt-2" Style="color: white; text-align: center; font-weight: 500;">
						Hochladen
					</MudText>
					<MudText Typo="Typo.caption" Class="mt-1" Style="color: rgba(255,255,255,0.8); text-align: center;">
						Bilder und Videos unterst√ºtzt (max. @ApplicationConstants.FileUpload.MaxFileCount Dateien auf einmal)
					</MudText>
				}
			}
			else
			{
				<MudProgressCircular Color="Color.Dark" Size="Size.Medium" Indeterminate="true" />
			}

		</MudPaper>
	</MudItem>
}


@code {
	[Parameter] public EventCallback OnPhotosUploaded { get; set; }

	[Inject] private IUploadService UploadService { get; set; } = null!;
	[Inject] private ISnackbar Snackbar { get; set; } = null!;
	[Inject] private IFileValidationService FileValidationService { get; set; } = null!;
	[Inject] private IUserPreferencesService UserPreferencesService { get; set; } = null!;
	[Inject] private IFeatureManager FeatureManager { get; set; } = null!;

	private bool IsUploading { get; set; }
	private string? UserName { get; set; }
	private string? AcceptedContentTypes { get; set; }

	private bool _hasRendered;
	private string _uploadProgress = string.Empty;

	private bool _isFeatureEnabled = false;

	protected override async Task OnInitializedAsync()
	{
		_isFeatureEnabled = await FeatureManager.IsEnabledAsync(FeatureFlags.EnablePhotoUpload);

		AcceptedContentTypes = await GetAcceptedContentTypesAsync();
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			UserName = await UserPreferencesService.GetUserNameAsync();
			_hasRendered = true;
			StateHasChanged();
		}
	}

	public async Task RefreshUserNameAsync()
	{
		UserName = await UserPreferencesService.GetUserNameAsync();
		StateHasChanged();
	}

	private async Task HandleMultiFileUploadAsync(InputFileChangeEventArgs eventArgs)
	{
		if (eventArgs.FileCount == 0)
		{
			return;
		}

		var files = eventArgs.GetMultipleFiles(ApplicationConstants.FileUpload.MaxFileCountNative).ToList();
		var validationResult = FileValidationService.ValidateMaxFileCount(files);

		if (!validationResult.IsValid)
		{
			Snackbar.Add(validationResult.ErrorMessage, Severity.Warning);
			return;
		}

		await ProcessFileUploadsAsync(files);
	}

	private async Task ProcessFileUploadsAsync(IReadOnlyList<IBrowserFile> files)
	{
		IsUploading = true;
		_uploadProgress = "Vorbereitung...";
		StateHasChanged();

		var uploadResults = new List<UploadResult>();

		for (var i = 0; i < files.Count; i++)
		{
			var file = files[i];
			_uploadProgress = $"Verarbeite Datei {i + 1} von {files.Count}...";
			StateHasChanged();

			var validationResult = await FileValidationService.ValidateFileAsync(file);

			if (!validationResult.IsValid)
			{
				Snackbar.Add(validationResult.ErrorMessage, Severity.Warning);
				continue;
			}

			var result = await UploadService.ProcessFileAsync(file, UserName);
			uploadResults.Add(result);

			var fileType = MediaHelper.IsVideoFile(file.ContentType) ? "Video" : "Foto";
			Snackbar.Add($"{fileType} {file.Name} erfolgreich hochgeladen", Severity.Success);

			if (OnPhotosUploaded.HasDelegate)
			{
				await OnPhotosUploaded.InvokeAsync();
			}

			StateHasChanged();
		}

		await HandleUploadResultsAsync(uploadResults);

		IsUploading = false;
		_uploadProgress = string.Empty;
		StateHasChanged();
	}

	private async Task HandleUploadResultsAsync(IReadOnlyList<UploadResult> results)
	{
		var successCount = results.Count(r => r.IsSuccess);
		var failures = results.Where(r => !r.IsSuccess).ToList();

		if (successCount > 1)
		{
			Snackbar.Add($"{successCount} Medien erfolgreich hochgeladen", Severity.Success);

			if (OnPhotosUploaded.HasDelegate)
			{
				await OnPhotosUploaded.InvokeAsync();
			}
		}

		foreach (var failure in failures.Take(3))
		{
			Snackbar.Add($"Fehler beim Upload von '{failure.FileName}'", Severity.Error);
		}

		if (failures.Count > 3)
		{
			Snackbar.Add($"Und {failures.Count - 3} weitere Fehler...", Severity.Warning);
		}
	}

	private async Task<string> GetAcceptedContentTypesAsync()
	{
		List<string> imageTypes = ["image/*"];

		if (await FeatureManager.IsEnabledAsync(FeatureFlags.EnableVideoUpload))
		{
			imageTypes.Add("video/*");
		}

		return string.Join(',', imageTypes);
	}
}
