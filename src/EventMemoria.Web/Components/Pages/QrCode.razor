@page "/qrcode"

@using EventMemoria.Web.Common.Settings
@using Microsoft.Extensions.Options
@using QRCoder.Core

@rendermode InteractiveServer

<PageTitle>@CustomizationOptions.Value.PageTitle - QR Code</PageTitle>

<div class="birds-container">
	<HeaderComponent />

	@if (_svgCode is null)
	{
		<div class="qr-loading">
			<MudProgressCircular Class="qr-loading-spinner" Size="Size.Large" Indeterminate="true" />
			<MudText Typo="Typo.h6">QR Code wird generiert...</MudText>
		</div>
	}
	else
	{
		<div class="qr-code-container">
			<MudText Typo="Typo.h4" Class="qr-code-title">
				QR Code
			</MudText>

			<MudText Typo="Typo.body1" Class="qr-code-description">
				Scanne diesen QR Code, um zur Event-Galerie zu gelangen und Deine Fotos hochzuladen.
			</MudText>

			<div class="qr-code-wrapper">
				@_svgCode
			</div>

			<div class="download-section">
				<MudButton Variant="Variant.Filled"
						   Class="qr-download-button"
						   StartIcon="@Icons.Material.Filled.Download"
						   OnClick="DownloadSvgAsync"
						   Size="Size.Large">
					QR Code herunterladen
				</MudButton>

				<MudButton Variant="Variant.Outlined"
						   Class="qr-copy-button"
						   StartIcon="@Icons.Material.Filled.ContentCopy"
						   OnClick="CopyUrlAsync"
						   Size="Size.Large"
						   Style="margin-top: 0.5rem;">
					URL kopieren
				</MudButton>
			</div>
		</div>
	}
</div>

@code {
	[Inject] private IOptions<CustomizationOptions> CustomizationOptions { get; set; } = null!;
	[Inject] private ILogger<QrCode> Logger { get; set; } = null!;
	[Inject] private IJSRuntime JsRuntime { get; set; } = null!;
	[Inject] private ISnackbar Snackbar { get; set; } = null!;

	private MarkupString? _svgCode;
	private string? _svgContent;

	protected override async Task OnInitializedAsync()
	{
		var targetUrl = CustomizationOptions.Value.QrCodeTargetUrl;
		var qrCodeGenerator = new QRCodeGenerator();
		var qrCodeDate = qrCodeGenerator.CreateQrCode(targetUrl, QRCodeGenerator.ECCLevel.Q);

		var qrCode = new SvgQRCode(qrCodeDate);

		_svgContent = qrCode.GetGraphic(20, darkColorHex: "#a86c6c", lightColorHex: "#ffffff", sizingMode: SvgQRCode.SizingMode.ViewBoxAttribute);
		_svgCode = new MarkupString(_svgContent);

		Logger.LogInformation("QR Code generated for URL: {Url}", targetUrl);

		await InvokeAsync(StateHasChanged);
	}

	private async Task DownloadSvgAsync()
	{
		if (_svgContent is null)
		{
			return;
		}

		const string fileName = "qr-code.svg";
		var bytes = System.Text.Encoding.UTF8.GetBytes(_svgContent);
		var base64 = Convert.ToBase64String(bytes);
		var dataUrl = $"data:image/svg+xml;base64,{base64}";

		try
		{
			await JsRuntime.InvokeVoidAsync("FileDownloader.downloadFile", dataUrl, fileName);
			Snackbar.Add("Datei wurde erstellt.", Severity.Success);
		}
		catch (Exception)
		{
			Snackbar.Add("Datei-Download konnte nicht erstellt werden", Severity.Warning);
		}
	}

	private async Task CopyUrlAsync()
	{
		var targetUrl = CustomizationOptions.Value.QrCodeTargetUrl;
		try
		{
			await JsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", targetUrl);
			Snackbar.Add("Url wurde in die Zwischenablage kopiert.", Severity.Success);
			Logger.LogInformation("URL copied to clipboard: {Url}", targetUrl);
		}
		catch(Exception)
		{
			Snackbar.Add("Url konnte nicht in die Zwischenablage kopiert werden.", Severity.Warning);
			Logger.LogWarning("URL could not be copied to clipboard: {Url}", targetUrl);
		}
	}
}
