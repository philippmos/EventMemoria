@using EventMemoria.Web.Common.Constants
@using EventMemoria.Web.Common.Settings
@using EventMemoria.Web.Services.Interfaces
@using Microsoft.Extensions.Options
@using MudBlazor
@using EventMemoria.Web.Components.Photo

@if (_showModal)
{
    <MudDialog Visible="@_showModal" Options="@_dialogOptions">
        <DialogContent>
            <div class="name-modal d-flex flex-column align-center">
                
                         
                <MudText Typo="Typo.h1"
                         GutterBottom="true"
                         Class="name-modal__title">
                    @CustomizationOptions.Value.NameModal.Title
                </MudText>


                <MudText Typo="Typo.h5" 
                         GutterBottom="true"
                         Class="name-modal__subtitle">
                    @CustomizationOptions.Value.NameModal.SubTitle
                </MudText>
                
                <MudText Typo="Typo.body1" 
                         Class="name-modal__description mb-4">
                    Damit Deine hochgeladenen Bilder richtig zugeordnet werden können, benötigen wir Deinen Namen als Foto-Author.
                </MudText>

                <MudTextField @bind-Value="_userName"
                              Label="Dein Name"
                              Variant="Variant.Outlined"
                              Margin="Margin.Normal"
                              FullWidth="true"
                              MaxLength="50"
                              Counter="50"
                              Immediate="true"
                              Adornment="Adornment.Start"
                              AdornmentIcon="Icons.Material.Filled.Person" />

                @if (!string.IsNullOrWhiteSpace(_validationMessage))
                {
                    <MudAlert Severity="Severity.Warning" 
                              Class="name-modal__alert mt-3">
                        @_validationMessage
                    </MudAlert>
                }
            </div>
        </DialogContent>
        
        <DialogActions>
            <MudButton OnClick="@(() => SaveAndClose())"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       Size="Size.Large"
                       StartIcon="Icons.Material.Filled.Check"
                       Disabled="!IsInputValid()"
                       FullWidth="true">
                Namen speichern
            </MudButton>
        </DialogActions>
    </MudDialog>
}

@code {
	[CascadingParameter] IMudDialogInstance MudDialog { get; set; } = default!;
	[Parameter] public EventCallback OnNameSaved { get; set; }

	[Inject] private IUserPreferencesService UserPreferencesService { get; set; } = default!;
	[Inject] private IOptions<CustomizationOptions> CustomizationOptions { get; set; } = default!;
	[Inject] private NavigationManager NavigationManager { get; set; } = default!;
	[Inject] private ISnackbar Snackbar { get; set; } = default!;


	private string _userName { get; set; } = string.Empty;
	private string _validationMessage { get; set; } = string.Empty;
	private bool _showModal { get; set; } = false;

	private DialogOptions _dialogOptions => new()
    {
        CloseOnEscapeKey = false,
        CloseButton = false,
        BackdropClick = false,
        MaxWidth = MaxWidth.Small,
        FullWidth = true
    };

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await CheckAndShowModal();
		}
		await base.OnAfterRenderAsync(firstRender);
	}

	private async Task CheckAndShowModal()
	{
		var userName = await UserPreferencesService.GetUserNameAsync();

		if (string.IsNullOrWhiteSpace(userName))
		{
			_showModal = true;
			await InvokeAsync(StateHasChanged);
		}
	}

	private async Task SaveAndClose()
	{
		if (!IsInputValid())
		{
			_validationMessage = "Bitte gib einen Namen mit mindestens 3 Buchstaben ein.";
			return;
		}

		try
		{
			var savedUserName = await UserPreferencesService.SetUserNameAsync(_userName.Trim());
			if (!string.IsNullOrWhiteSpace(savedUserName))
			{
				Snackbar.Add($"Super, {savedUserName}! Du kannst jetzt Deine Bilder hochladen.", Severity.Success);
			}
			else
			{
				Snackbar.Add($"Dein Name konnte nicht gespeichert werden.", Severity.Warning);
			}


            _showModal = false;
            StateHasChanged();
            
            if (OnNameSaved.HasDelegate)
            {
                await OnNameSaved.InvokeAsync();
            }
            
            NavigationManager.Refresh();
        }
        catch (Exception)
        {
            _validationMessage = "Fehler beim Speichern. Bitte versuche es erneut.";
			Snackbar.Add($"Dein Name konnte nicht gespeichert werden.", Severity.Warning);
        }
    }

    private bool IsInputValid()
    {
        if (string.IsNullOrWhiteSpace(_userName))
        {
            return false;
        }

        if (_userName.Trim().Length < ApplicationConstants.UserPreferences.UserNameMinLength)
        {
            return false;
        }

        return true;
    }
}
