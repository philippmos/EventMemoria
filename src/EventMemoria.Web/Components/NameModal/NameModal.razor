@using EventMemoria.Web.Common.Constants
@using EventMemoria.Web.Common.Settings
@using EventMemoria.Web.Services.Interfaces
@using Microsoft.Extensions.Options

@if (ShowModal)
{
    <MudDialog Visible="@ShowModal" Options="@DialogOptions">
        <DialogContent>
            <div class="name-modal d-flex flex-column align-center">


                <MudText Typo="Typo.h1"
                         GutterBottom="true"
                         Class="name-modal__title">
                    @CustomizationOptions.Value.NameModal.Title
                </MudText>


                <MudText Typo="Typo.h5"
                         GutterBottom="true"
                         Class="name-modal__subtitle">
                    @CustomizationOptions.Value.NameModal.SubTitle
                </MudText>

                <MudText Typo="Typo.body1"
                         Class="name-modal__description mb-4">
                    @CustomizationOptions.Value.NameModal.Message
                </MudText>

                <MudTextField @bind-Value="UserName"
                              Label="Dein Name"
                              Variant="Variant.Outlined"
                              Margin="Margin.Normal"
                              FullWidth="true"
                              MaxLength="50"
                              Counter="50"
                              Immediate="true"
                              Adornment="Adornment.Start"
                              AdornmentIcon="Icons.Material.Filled.Person" />

                @if (!string.IsNullOrWhiteSpace(ValidationMessage))
                {
                    <MudAlert Severity="Severity.Warning"
                              Class="name-modal__alert mt-3">
                        @ValidationMessage
                    </MudAlert>
                }
            </div>
        </DialogContent>

        <DialogActions>
            <MudButton OnClick="@(() => SaveAndCloseAsync())"
                       Variant="Variant.Filled"
                       Color="Color.Primary"
                       Size="Size.Large"
                       StartIcon="Icons.Material.Filled.Check"
                       Disabled="!IsInputValid()"
                       FullWidth="true">
                Namen speichern
            </MudButton>
        </DialogActions>
    </MudDialog>
}

@code {
	[CascadingParameter] IMudDialogInstance MudDialog { get; set; } = null!;
	[Parameter] public EventCallback OnNameSaved { get; set; }

	[Inject] private IUserPreferencesService UserPreferencesService { get; set; } = null!;
	[Inject] private IOptions<CustomizationOptions> CustomizationOptions { get; set; } = null!;
	[Inject] private NavigationManager NavigationManager { get; set; } = null!;
	[Inject] private ISnackbar Snackbar { get; set; } = null!;


	private string UserName { get; set; } = string.Empty;
	private string ValidationMessage { get; set; } = string.Empty;
	private bool ShowModal { get; set; }

	private static DialogOptions DialogOptions => new()
    {
        CloseOnEscapeKey = false,
        CloseButton = false,
        BackdropClick = false,
        MaxWidth = MaxWidth.Small,
        FullWidth = true
    };

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await CheckAndShowModalAsync();
		}
		await base.OnAfterRenderAsync(firstRender);
	}

	private async Task CheckAndShowModalAsync()
	{
		var userName = await UserPreferencesService.GetUserNameAsync();

		if (string.IsNullOrWhiteSpace(userName))
		{
			ShowModal = true;
			await InvokeAsync(StateHasChanged);
		}
	}

	private async Task SaveAndCloseAsync()
	{
		if (!IsInputValid())
		{
			ValidationMessage = "Bitte gib einen Namen mit mindestens 3 Buchstaben ein.";
			return;
		}

		try
		{
			var savedUserName = await UserPreferencesService.SetUserNameAsync(UserName.Trim());
			if (!string.IsNullOrWhiteSpace(savedUserName))
			{
				Snackbar.Add($"Super, {savedUserName}! Du kannst jetzt Deine Bilder hochladen.", Severity.Success);
			}
			else
			{
				Snackbar.Add($"Dein Name konnte nicht gespeichert werden.", Severity.Warning);
			}


            ShowModal = false;
            StateHasChanged();

            if (OnNameSaved.HasDelegate)
            {
                await OnNameSaved.InvokeAsync();
            }

            NavigationManager.Refresh();
        }
        catch (Exception)
        {
            ValidationMessage = "Fehler beim Speichern. Bitte versuche es erneut.";
			Snackbar.Add($"Dein Name konnte nicht gespeichert werden.", Severity.Warning);
        }
    }

    private bool IsInputValid()
    {
        if (string.IsNullOrWhiteSpace(UserName))
        {
            return false;
        }

        return UserName.Trim().Length >= ApplicationConstants.UserPreferences.UserNameMinLength;
    }
}
